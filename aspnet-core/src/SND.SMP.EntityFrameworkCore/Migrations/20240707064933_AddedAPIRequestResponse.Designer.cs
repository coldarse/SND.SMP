// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SND.SMP.EntityFrameworkCore;

#nullable disable

namespace SND.SMP.Migrations
{
    [DbContext(typeof(SMPDbContext))]
    [Migration("20240707064933_AddedAPIRequestResponse")]
    partial class AddedAPIRequestResponse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ExceptionMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ReturnValue")
                        .HasColumnType("longtext");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserLinkId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProviderKey", "TenantId")
                        .IsUnique();

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576)
                        .HasColumnType("longtext");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint unsigned");

                    b.Property<short>("TryCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityFullName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.HasIndex("EntityFullName", "DynamicPropertyId", "TenantId")
                        .IsUnique();

                    b.ToTable("AbpDynamicEntityProperties");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("DynamicEntityPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("longtext");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DynamicEntityPropertyId");

                    b.ToTable("AbpDynamicEntityPropertyValues");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("InputType")
                        .HasColumnType("longtext");

                    b.Property<string>("Permission")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyName", "TenantId")
                        .IsUnique();

                    b.ToTable("AbpDynamicProperties");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.ToTable("AbpDynamicPropertyValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("EntityChangeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48)
                        .HasColumnType("varchar(48)");

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("varchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("longtext");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("EntityChangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("NewValueHash")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("OriginalValueHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("varchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Icon")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864)
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576)
                        .HasColumnType("longtext");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072)
                        .HasColumnType("longtext");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("TargetNotifiers")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072)
                        .HasColumnType("longtext");

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072)
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<string>("TargetNotifiers")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576)
                        .HasColumnType("longtext");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TargetNotifiers")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnType("char(36)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookEvents");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Response")
                        .HasColumnType("longtext");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WebhookSubscriptionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.ToTable("AbpWebhookSendAttempts");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Headers")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookUri")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Webhooks")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookSubscriptions");
                });

            modelBuilder.Entity("SND.SMP.APIRequestResponses.APIRequestResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<string>("RequestBody")
                        .HasColumnType("longtext")
                        .HasColumnName("RequestBody");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("RequestDateTime");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("longtext")
                        .HasColumnName("ResponseBody");

                    b.Property<DateTime>("ResponseDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ResponseDateTime");

                    b.Property<string>("URL")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.ToTable("APIRequestResponses", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Airports.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Code");

                    b.Property<string>("Country")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Country");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Airports", (string)null);
                });

            modelBuilder.Entity("SND.SMP.ApplicationSettings.ApplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Name");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("SND.SMP.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328)
                        .HasColumnType("varchar(328)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328)
                        .HasColumnType("varchar(328)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("SND.SMP.Bags.Bag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BagNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BagNo");

                    b.Property<string>("CN35No")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CN35No");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CountryCode");

                    b.Property<int?>("DispatchId")
                        .HasColumnType("int")
                        .HasColumnName("DispatchId");

                    b.Property<int?>("ItemCountPost")
                        .HasColumnType("int")
                        .HasColumnName("ItemCountPost");

                    b.Property<int?>("ItemCountPre")
                        .HasColumnType("int")
                        .HasColumnName("ItemCountPre");

                    b.Property<decimal?>("UnderAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("UnderAmount");

                    b.Property<decimal?>("WeightPost")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("WeightPost");

                    b.Property<decimal?>("WeightPre")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("WeightPre");

                    b.Property<decimal?>("WeightVariance")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("WeightVariance");

                    b.HasKey("Id");

                    b.HasIndex("DispatchId");

                    b.ToTable("Bags", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Chibis.Chibi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("FileName");

                    b.Property<string>("GeneratedName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("GeneratedName");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("OriginalName");

                    b.Property<string>("URL")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("URL");

                    b.Property<string>("UUID")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.ToTable("Chibis", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Currencies.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Abbr")
                        .HasColumnType("longtext")
                        .HasColumnName("Abbr");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("SND.SMP.CustomerPostals.CustomerPostal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AccountNo")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountNo");

                    b.Property<string>("Postal")
                        .HasColumnType("longtext")
                        .HasColumnName("Postal");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("Rate");

                    b.HasKey("Id");

                    b.HasIndex("AccountNo");

                    b.HasIndex("Rate");

                    b.ToTable("CustomerPostals", (string)null);
                });

            modelBuilder.Entity("SND.SMP.CustomerTransactions.CustomerTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Currency");

                    b.Property<string>("Customer")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Customer");

                    b.Property<string>("Description")
                        .HasMaxLength(521)
                        .HasColumnType("varchar(521)")
                        .HasColumnName("Description");

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PaymentMode");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ReferenceNo");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("TransactionDate");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TransactionType");

                    b.Property<string>("Wallet")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Wallet");

                    b.HasKey("Id");

                    b.ToTable("CustomerTransactions", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Customers.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("APIAccessToken")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("APIAccessToken");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("longtext")
                        .HasColumnName("AddressLine1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext")
                        .HasColumnName("AddressLine2");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("City");

                    b.Property<string>("ClientKey")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ClientKey");

                    b.Property<string>("ClientSecret")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ClientSecret");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Country")
                        .HasColumnType("longtext")
                        .HasColumnName("Country");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("EmailAddress");

                    b.Property<string>("EmailAddress2")
                        .HasColumnType("longtext")
                        .HasColumnName("EmailAddress2");

                    b.Property<string>("EmailAddress3")
                        .HasColumnType("longtext")
                        .HasColumnName("EmailAddress3");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsActive");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("longtext")
                        .HasColumnName("RegistrationNo");

                    b.Property<string>("State")
                        .HasColumnType("longtext")
                        .HasColumnName("State");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("SND.SMP.DispatchUsedAmounts.DispatchUsedAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CustomerCode");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Description");

                    b.Property<string>("DispatchNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("DispatchNo");

                    b.Property<string>("Wallet")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Wallet");

                    b.HasKey("Id");

                    b.ToTable("DispatchUsedAmounts", (string)null);
                });

            modelBuilder.Entity("SND.SMP.DispatchValidations.DispatchValidation", b =>
                {
                    b.Property<string>("DispatchNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("DispatchNo");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CustomerCode");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCompleted");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStarted");

                    b.Property<string>("FilePath")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FilePath");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsFundLack")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsFundLack");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsValid");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProductCode");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ServiceCode");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Status");

                    b.Property<double>("TookInSec")
                        .HasColumnType("double")
                        .HasColumnName("TookInSec");

                    b.Property<int>("ValidationProgress")
                        .HasColumnType("int")
                        .HasColumnName("ValidationProgress");

                    b.HasKey("DispatchNo");

                    b.ToTable("DispatchValidations", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Dispatches.Dispatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ATA")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ATA");

                    b.Property<string>("AirlineCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AirlineCode");

                    b.Property<int?>("AirportHandling")
                        .HasColumnType("int")
                        .HasColumnName("AirportHandling");

                    b.Property<string>("AirportTranshipment")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AirportTranshipment");

                    b.Property<DateTime?>("AirwayBLDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("AirwayBLDate");

                    b.Property<string>("AirwayBLNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AirwayBLNo");

                    b.Property<string>("BRCN38RequestId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BRCN38RequestId");

                    b.Property<string>("BatchId")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("BatchId");

                    b.Property<string>("CN38")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CN38");

                    b.Property<string>("CORateOptionId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CORateOptionId");

                    b.Property<string>("CountryOfLoading")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CountryOfLoading");

                    b.Property<string>("CurrencyId")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("CurrencyId");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CustomerCode");

                    b.Property<DateTime?>("DateAcceptanceScanning")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateAcceptanceScanning");

                    b.Property<DateTime?>("DateArrival")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateArrival");

                    b.Property<DateTime?>("DateCLStage1Submitted")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCLStage1Submitted");

                    b.Property<DateTime?>("DateCLStage2Submitted")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCLStage2Submitted");

                    b.Property<DateTime?>("DateCLStage3Submitted")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCLStage3Submitted");

                    b.Property<DateTime?>("DateCLStage4Submitted")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCLStage4Submitted");

                    b.Property<DateTime?>("DateCLStage5Submitted")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCLStage5Submitted");

                    b.Property<DateTime?>("DateCLStage6Submitted")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCLStage6Submitted");

                    b.Property<DateTime?>("DateEndedAPI")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateEndedAPI");

                    b.Property<DateTime?>("DateFlight")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateFlight");

                    b.Property<DateTime?>("DateFlightArrival")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateFlightArrival");

                    b.Property<DateTime?>("DateLocalDelivery")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateLocalDelivery");

                    b.Property<DateTime?>("DatePerformanceDaysDiff")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DatePerformanceDaysDiff");

                    b.Property<DateTime?>("DateSOAProcessCompleted")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateSOAProcessCompleted");

                    b.Property<DateTime?>("DateStartedAPI")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStartedAPI");

                    b.Property<DateOnly?>("DispatchDate")
                        .HasColumnType("date")
                        .HasColumnName("DispatchDate");

                    b.Property<string>("DispatchNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("DispatchNo");

                    b.Property<DateOnly?>("ETAtoHKG")
                        .HasColumnType("date")
                        .HasColumnName("ETAtoHKG");

                    b.Property<string>("ExtDispatchNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExtDispatchNo");

                    b.Property<string>("FlightNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FlightNo");

                    b.Property<string>("FlightTrucking")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FlightTrucking");

                    b.Property<int?>("ImportProgress")
                        .HasColumnType("int")
                        .HasColumnName("ImportProgress");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsActive");

                    b.Property<bool?>("IsPayment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsPayment");

                    b.Property<int?>("ItemCount")
                        .HasColumnType("int")
                        .HasColumnName("ItemCount");

                    b.Property<int?>("NoofBag")
                        .HasColumnType("int")
                        .HasColumnName("NoofBag");

                    b.Property<string>("OfficeDestination")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("OfficeDestination");

                    b.Property<string>("OfficeOrigin")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("OfficeOrigin");

                    b.Property<string>("POBox")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("POBox");

                    b.Property<string>("PPI")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PPI");

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PaymentMode");

                    b.Property<int?>("PerformanceDaysDiff")
                        .HasColumnType("int")
                        .HasColumnName("PerformanceDaysDiff");

                    b.Property<string>("PortDeparture")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PortDeparture");

                    b.Property<int?>("PostCheckTotalBags")
                        .HasColumnType("int")
                        .HasColumnName("PostCheckTotalBags");

                    b.Property<decimal?>("PostCheckTotalWeight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("PostCheckTotalWeight");

                    b.Property<DateTime?>("PostDeclarationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PostDeclarationDate");

                    b.Property<string>("PostDeclarationMsg")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PostDeclarationMsg");

                    b.Property<bool?>("PostDeclarationSuccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PostDeclarationSuccess");

                    b.Property<DateTime?>("PostManifestDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PostManifestDate");

                    b.Property<string>("PostManifestMsg")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PostManifestMsg");

                    b.Property<bool?>("PostManifestSuccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PostManifestSuccess");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProductCode");

                    b.Property<string>("Remark")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Remark");

                    b.Property<int?>("SOAProcessCompletedByID")
                        .HasColumnType("int")
                        .HasColumnName("SOAProcessCompletedByID");

                    b.Property<int?>("SeqNo")
                        .HasColumnType("int")
                        .HasColumnName("SeqNo");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ServiceCode");

                    b.Property<string>("Stage1StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage1StatusDesc");

                    b.Property<string>("Stage2StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage2StatusDesc");

                    b.Property<string>("Stage3StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage3StatusDesc");

                    b.Property<string>("Stage4StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage4StatusDesc");

                    b.Property<string>("Stage5StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage5StatusDesc");

                    b.Property<string>("Stage6StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage6StatusDesc");

                    b.Property<string>("Stage7StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage7StatusDesc");

                    b.Property<string>("Stage8StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage8StatusDesc");

                    b.Property<string>("Stage9StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage9StatusDesc");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StatusAPI")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("StatusAPI");

                    b.Property<decimal?>("TotalAmountSOA")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalAmountSOA");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalPrice");

                    b.Property<decimal?>("TotalWeight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("TotalWeight");

                    b.Property<decimal?>("TotalWeightSOA")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("TotalWeightSOA");

                    b.Property<DateTime?>("TransactionDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("TransactionDateTime");

                    b.Property<decimal?>("WeightAveraged")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("WeightAveraged");

                    b.Property<decimal?>("WeightGap")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("WeightGap");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCode");

                    b.ToTable("Dispatches", (string)null);
                });

            modelBuilder.Entity("SND.SMP.EWalletTypes.EWalletType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("EWalletTypes", (string)null);
                });

            modelBuilder.Entity("SND.SMP.EmailContents.EmailContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("Content");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Name");

                    b.Property<string>("Subject")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Subject");

                    b.HasKey("Id");

                    b.ToTable("EmailContents", (string)null);
                });

            modelBuilder.Entity("SND.SMP.IMPCS.IMPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AirportCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AirportCode");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CountryCode");

                    b.Property<string>("IMPCCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IMPCCode");

                    b.Property<string>("LogisticCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LogisticCode");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("IMPCS", (string)null);
                });

            modelBuilder.Entity("SND.SMP.ItemIdRunningNos.ItemIdRunningNo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Customer")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Customer");

                    b.Property<string>("Prefix")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixNo")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("PrefixNo");

                    b.Property<int>("RunningNo")
                        .HasColumnType("int")
                        .HasColumnName("RunningNo");

                    b.Property<string>("Suffix")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Suffix");

                    b.HasKey("Id");

                    b.ToTable("ItemIdRunningNos", (string)null);
                });

            modelBuilder.Entity("SND.SMP.ItemMins.ItemMin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DispatchID")
                        .HasColumnType("int")
                        .HasColumnName("DispatchID");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Address");

                    b.Property<int?>("BagID")
                        .HasColumnType("int")
                        .HasColumnName("BagID");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("City");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CountryCode");

                    b.Property<int?>("DeliveredInDays")
                        .HasColumnType("int")
                        .HasColumnName("DeliveredInDays");

                    b.Property<DateOnly?>("DispatchDate")
                        .HasColumnType("date")
                        .HasColumnName("DispatchDate");

                    b.Property<string>("ExtID")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ExtID");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDelivered");

                    b.Property<string>("ItemDesc")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ItemDesc");

                    b.Property<decimal?>("ItemValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ItemValue");

                    b.Property<int?>("Month")
                        .HasColumnType("int")
                        .HasColumnName("Month");

                    b.Property<string>("RecpName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("RecpName");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("TelNo")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("TelNo");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Weight");

                    b.HasKey("Id", "DispatchID");

                    b.HasIndex("BagID");

                    b.HasIndex("DispatchID");

                    b.ToTable("ItemMins", (string)null);
                });

            modelBuilder.Entity("SND.SMP.ItemTrackingApplications.ItemTrackingApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CustomerCode");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCreated");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Path");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("PostalDesc")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PostalDesc");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ProductCode");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ProductDesc");

                    b.Property<string>("Range")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Range");

                    b.Property<string>("Status")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Status");

                    b.Property<int>("TookInSec")
                        .HasColumnType("int")
                        .HasColumnName("TookInSec");

                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.HasKey("Id");

                    b.ToTable("ItemTrackingApplications", (string)null);
                });

            modelBuilder.Entity("SND.SMP.ItemTrackingReviews.ItemTrackingReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CustomerCode");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCreated");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("PostalDesc")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PostalDesc");

                    b.Property<string>("Prefix")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixNo")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("PrefixNo");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ProductCode");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Remark");

                    b.Property<string>("Status")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Status");

                    b.Property<string>("Suffix")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Suffix");

                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.Property<int>("TotalGiven")
                        .HasColumnType("int")
                        .HasColumnName("TotalGiven");

                    b.HasKey("Id");

                    b.ToTable("ItemTrackingReviews", (string)null);
                });

            modelBuilder.Entity("SND.SMP.ItemTrackings.ItemTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("CustomerCode");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime>("DateUsed")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateUsed");

                    b.Property<int>("DispatchId")
                        .HasColumnType("int")
                        .HasColumnName("DispatchId");

                    b.Property<string>("DispatchNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("DispatchNo");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ProductCode");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewId");

                    b.Property<string>("TrackingNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("TrackingNo");

                    b.HasKey("Id");

                    b.ToTable("ItemTrackings", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Items.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DispatchID")
                        .HasColumnType("int")
                        .HasColumnName("DispatchID");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Address");

                    b.Property<string>("Address2")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("Address2");

                    b.Property<string>("AddressNo")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("AddressNo");

                    b.Property<int?>("BagID")
                        .HasColumnType("int")
                        .HasColumnName("BagID");

                    b.Property<string>("BagNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BagNo");

                    b.Property<string>("CLAbreviaturaCentro")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CLAbreviaturaCentro");

                    b.Property<string>("CLAbreviaturaServicio")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLAbreviaturaServicio");

                    b.Property<string>("CLCodigoDelegacionDestino")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLCodigoDelegacionDestino");

                    b.Property<string>("CLCodigoEncaminamiento")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLCodigoEncaminamiento");

                    b.Property<string>("CLComunaDestino")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLComunaDestino");

                    b.Property<string>("CLCuartel")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLCuartel");

                    b.Property<string>("CLDireccionDestino")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLDireccionDestino");

                    b.Property<string>("CLNombreDelegacionDestino")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLNombreDelegacionDestino");

                    b.Property<string>("CLNumeroEnvio")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLNumeroEnvio");

                    b.Property<string>("CLSDP")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLSDP");

                    b.Property<string>("CLSector")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLSector");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("City");

                    b.Property<string>("CityId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CityId");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CountryCode");

                    b.Property<DateTime?>("DateStage1")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStage1");

                    b.Property<DateTime?>("DateStage2")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStage2");

                    b.Property<DateTime?>("DateStage3")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStage3");

                    b.Property<DateTime?>("DateStage4")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStage4");

                    b.Property<DateTime?>("DateStage5")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStage5");

                    b.Property<DateTime?>("DateStage6")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStage6");

                    b.Property<DateTime?>("DateStage7")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStage7");

                    b.Property<DateTime?>("DateStage8")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStage8");

                    b.Property<DateTime?>("DateStage9")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateStage9");

                    b.Property<DateTime?>("DateSuccessfulDelivery")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateSuccessfulDelivery");

                    b.Property<int?>("DeliveredInDays")
                        .HasColumnType("int")
                        .HasColumnName("DeliveredInDays");

                    b.Property<DateOnly?>("DispatchDate")
                        .HasColumnType("date")
                        .HasColumnName("DispatchDate");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("ExemptedRemark")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ExemptedRemark");

                    b.Property<string>("ExtID")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ExtID");

                    b.Property<string>("ExtMsg")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ExtMsg");

                    b.Property<string>("FinalOfficeId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FinalOfficeId");

                    b.Property<string>("HSCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HSCode");

                    b.Property<decimal?>("Height")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Height");

                    b.Property<string>("IOSSTax")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IOSSTax");

                    b.Property<string>("IdentityType")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IdentityType");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDelivered");

                    b.Property<bool?>("IsExempted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsExempted");

                    b.Property<string>("ItemDesc")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ItemDesc");

                    b.Property<decimal?>("ItemValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ItemValue");

                    b.Property<decimal?>("Length")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Length");

                    b.Property<int?>("Month")
                        .HasColumnType("int")
                        .HasColumnName("Month");

                    b.Property<string>("PassportNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PassportNo");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("Postcode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Postcode");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProductCode");

                    b.Property<int?>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("Qty");

                    b.Property<string>("RateCategory")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("RateCategory");

                    b.Property<string>("RecpName")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("RecpName");

                    b.Property<string>("RefNo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RefNo");

                    b.Property<string>("SealNo")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SealNo");

                    b.Property<string>("SenderName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("SenderName");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ServiceCode");

                    b.Property<string>("Stage1StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage1StatusDesc");

                    b.Property<string>("Stage2StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage2StatusDesc");

                    b.Property<string>("Stage3StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage3StatusDesc");

                    b.Property<string>("Stage4StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage4StatusDesc");

                    b.Property<string>("Stage5StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage5StatusDesc");

                    b.Property<DateTime?>("Stage6OMTArrivalDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Stage6OMTArrivalDate");

                    b.Property<string>("Stage6OMTCountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Stage6OMTCountryCode");

                    b.Property<DateTime?>("Stage6OMTDepartureDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Stage6OMTDepartureDate");

                    b.Property<string>("Stage6OMTDestinationCity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Stage6OMTDestinationCity");

                    b.Property<string>("Stage6OMTDestinationCityCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Stage6OMTDestinationCityCode");

                    b.Property<string>("Stage6OMTStatusDesc")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Stage6OMTStatusDesc");

                    b.Property<string>("Stage6StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage6StatusDesc");

                    b.Property<string>("Stage7StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage7StatusDesc");

                    b.Property<string>("Stage8StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage8StatusDesc");

                    b.Property<string>("Stage9StatusDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Stage9StatusDesc");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("State");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("TaxPayMethod")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TaxPayMethod");

                    b.Property<string>("TelNo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TelNo");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Weight");

                    b.Property<decimal?>("Width")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Width");

                    b.HasKey("Id", "DispatchID");

                    b.HasIndex("BagID");

                    b.HasIndex("DispatchID");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("SND.SMP.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("SND.SMP.PostalCountries.PostalCountry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CountryCode");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PostalCode");

                    b.HasKey("Id");

                    b.ToTable("PostalCountries", (string)null);
                });

            modelBuilder.Entity("SND.SMP.PostalOrgs.PostalOrg", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("PostalOrgs", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Postals.Postal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("ItemTopUpValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ItemTopUpValue");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("PostalDesc")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PostalDesc");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProductCode");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ProductDesc");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ServiceCode");

                    b.Property<string>("ServiceDesc")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ServiceDesc");

                    b.HasKey("Id");

                    b.ToTable("Postals", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Queues.Queue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCreated");

                    b.Property<bool>("DeleteFileOnFailed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("DeleteFileOnFailed");

                    b.Property<bool>("DeleteFileOnSuccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("DeleteFileOnSuccess");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("EndTime");

                    b.Property<string>("ErrorMsg")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("ErrorMsg");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EventType");

                    b.Property<string>("FilePath")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("FilePath");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("StartTime");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Status");

                    b.Property<double>("TookInSec")
                        .HasColumnType("double")
                        .HasColumnName("TookInSec");

                    b.HasKey("Id");

                    b.ToTable("Queues", (string)null);
                });

            modelBuilder.Entity("SND.SMP.RateItems.RateItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CountryCode");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("CurrencyId");

                    b.Property<decimal>("Fee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Fee");

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PaymentMode");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProductCode");

                    b.Property<int>("RateId")
                        .HasColumnType("int")
                        .HasColumnName("RateId");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("ServiceCode");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Total");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("RateId");

                    b.ToTable("RateItems", (string)null);
                });

            modelBuilder.Entity("SND.SMP.RateWeightBreaks.RateWeightBreak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("CurrencyId");

                    b.Property<bool>("IsExceedRule")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsExceedRule");

                    b.Property<decimal?>("ItemRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ItemRate");

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("PaymentMode");

                    b.Property<string>("PostalOrgId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PostalOrgId");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProductCode");

                    b.Property<int>("RateId")
                        .HasColumnType("int")
                        .HasColumnName("RateId");

                    b.Property<decimal?>("WeightMax")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("WeightMax");

                    b.Property<decimal?>("WeightMin")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("WeightMin");

                    b.Property<decimal?>("WeightRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("WeightRate");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PostalOrgId");

                    b.HasIndex("RateId");

                    b.ToTable("RateWeightBreaks", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Rates.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CardName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CardName");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("Count");

                    b.Property<string>("Service")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Service");

                    b.HasKey("Id");

                    b.ToTable("Rates", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Refunds.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Description");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ReferenceNo");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.ToTable("Refunds", (string)null);
                });

            modelBuilder.Entity("SND.SMP.Wallets.Wallet", b =>
                {
                    b.Property<string>("Customer")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Customer")
                        .HasColumnOrder(0);

                    b.Property<long>("EWalletType")
                        .HasColumnType("bigint")
                        .HasColumnName("EWalletType")
                        .HasColumnOrder(1);

                    b.Property<long>("Currency")
                        .HasColumnType("bigint")
                        .HasColumnName("Currency")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Balance");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.HasKey("Customer", "EWalletType", "Currency");

                    b.HasIndex("Currency");

                    b.HasIndex("EWalletType");

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("SND.SMP.WeightAdjustments.WeightAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Description");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceId");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ReferenceNo");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.ToTable("WeightAdjustments", (string)null);
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Roles.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Users.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Users.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Users.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Users.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Users.User", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany()
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicEntityProperty", "DynamicEntityProperty")
                        .WithMany()
                        .HasForeignKey("DynamicEntityPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicEntityProperty");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany("DynamicPropertyValues")
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.HasOne("Abp.Webhooks.WebhookEvent", "WebhookEvent")
                        .WithMany()
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookEvent");
                });

            modelBuilder.Entity("SND.SMP.Authorization.Roles.Role", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("SND.SMP.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("SND.SMP.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("SND.SMP.Authorization.Users.User", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("SND.SMP.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("SND.SMP.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("SND.SMP.Bags.Bag", b =>
                {
                    b.HasOne("SND.SMP.Dispatches.Dispatch", null)
                        .WithMany()
                        .HasForeignKey("DispatchId");
                });

            modelBuilder.Entity("SND.SMP.CustomerPostals.CustomerPostal", b =>
                {
                    b.HasOne("SND.SMP.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SND.SMP.Rates.Rate", null)
                        .WithMany()
                        .HasForeignKey("Rate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SND.SMP.Dispatches.Dispatch", b =>
                {
                    b.HasOne("SND.SMP.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerCode")
                        .HasPrincipalKey("Code");
                });

            modelBuilder.Entity("SND.SMP.ItemMins.ItemMin", b =>
                {
                    b.HasOne("SND.SMP.Bags.Bag", null)
                        .WithMany()
                        .HasForeignKey("BagID");

                    b.HasOne("SND.SMP.Dispatches.Dispatch", null)
                        .WithMany()
                        .HasForeignKey("DispatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SND.SMP.Items.Item", b =>
                {
                    b.HasOne("SND.SMP.Bags.Bag", null)
                        .WithMany()
                        .HasForeignKey("BagID");

                    b.HasOne("SND.SMP.Dispatches.Dispatch", null)
                        .WithMany()
                        .HasForeignKey("DispatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SND.SMP.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("SND.SMP.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("SND.SMP.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("Edition");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("SND.SMP.RateItems.RateItem", b =>
                {
                    b.HasOne("SND.SMP.Currencies.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SND.SMP.Rates.Rate", null)
                        .WithMany()
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SND.SMP.RateWeightBreaks.RateWeightBreak", b =>
                {
                    b.HasOne("SND.SMP.Currencies.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SND.SMP.PostalOrgs.PostalOrg", null)
                        .WithMany()
                        .HasForeignKey("PostalOrgId");

                    b.HasOne("SND.SMP.Rates.Rate", null)
                        .WithMany()
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SND.SMP.Wallets.Wallet", b =>
                {
                    b.HasOne("SND.SMP.Currencies.Currency", null)
                        .WithMany()
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SND.SMP.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("Customer")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SND.SMP.EWalletTypes.EWalletType", null)
                        .WithMany()
                        .HasForeignKey("EWalletType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Roles.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("SND.SMP.Authorization.Users.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicProperty", b =>
                {
                    b.Navigation("DynamicPropertyValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Navigation("EntityChanges");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("SND.SMP.Authorization.Roles.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SND.SMP.Authorization.Users.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Permissions");

                    b.Navigation("Roles");

                    b.Navigation("Settings");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
